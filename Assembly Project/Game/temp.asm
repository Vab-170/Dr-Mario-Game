draw_cap1:
# Registers Used in function:
# $s4 - saved return address
# $s2 - first pixel column
# $s3 - first pixel row
# $a1 - column for draw_pixel
# $a2 - row for draw_pixel
# $t0 - holds total grid width or 32 pixels for me
# $t1 - holds the color generated by the load_color fxn
# $t2 - I think this holds the ADDR_DSPL
# $t3 - holds column index
# $t4 - base grid address
# $t5 - holds the depiction of the pixel
# $t6 - final grid address
# $t7 - holds the red color address for comparison
# $t8 - holds the blue color address for comparison
# $t9 - holds the yellow color address for comparison

    # Save return address
    move $s6, $ra

    # Load first pixel position
    la $t0, pixel1_x       # Load address of pixel1_x
    lb $s2, 0($t0)         # Load byte value of pixel1_x into $s2
    la $t0, pixel1_y       # Load address of pixel1_y
    lb $s3, 0($t0)         # Load byte value of pixel1_y into $s3
    
    jal load_color
    
    move $s4, $t1
    
    move $a1, $s2           # Set column of first pixel
    move $a2, $s3           # Set row of first pixel
    jal draw_pixel          # Draw pixel to screen
    
    move $ra, $s6
    
    # Save the colors to reg
    lw $t7, red_col
    lw $t8, blue_col
    lw $t9, yellow_col
    
    # Loading pixel depiction based on color loaded by random generator
    beq $t1, $t7, red_cap
    beq $t1, $t8, blue_cap
    beq $t1, $t9, yellow_cap

draw_cap2:
# Registers Used in function:
# $s4 - saved return address
# $a1 - column for draw_pixel
# $a2 - row for draw_pixel
# $t0 - holds total grid width or 32 pixels for me
# $t1 - holds the color generated by the load_color fxn
# $t2 - I think this holds the ADDR_DSPL
# $t3 - holds column index
# $t4 - base grid address
# $t5 - holds the depiction of the pixel
# $t6 - final grid address
# $t7 - holds the red color address for comparison
# $t8 - holds the blue color address for comparison
# $t9 - holds the yellow color address for comparison

    # Save return address
    move $s7, $ra
    
    move $s2, $s4
    
    # Load second pixel position
    la $t0, pixel2_x      # Load address of pixel2_x
    lb $s4, 0($t0)        # Load byte value of pixel2_x into $a1
    la $t0, pixel2_y      # Load address of pixel2_y
    lb $s5, 0($t0)        # Load byte value of pixel2_y into $a2

    jal load_color
    
    move $a1, $s4           # Set column of second pixel
    move $a2, $s5           # Set row of second pixel
    jal draw_pixel          # Draw pixel to screen
    
    move $ra, $s7
    
    # Update data map with pixel information
    la $t4, grid
    li $t0, 32             # Grid width
    mul $t3, $s3, $t0      # Row offset
    add $t3, $t3, $s2      # Add column index
    add $t6, $t4, $t3      # Final grid cell address
    
    # Save the colors to reg
    lw $t7, red_col
    lw $t8, blue_col
    lw $t9, yellow_col
    
    # Loading pixel depiction based on color loaded by random generator
    beq $t1, $t7, red_cap
    beq $t1, $t8, blue_cap
    beq $t1, $t9, yellow_cap
    
draw_capsule:
    # Save return address
    move $s0, $ra

    jal draw_cap1
    jal draw_cap2

    # Restore return address and return
    move $ra, $s0
    
red_cap:
    li $t5, 00000000       # Load the pixel depiction into $t5
    sb $t5, 0($t6)         # Store the pixel dpeiction in $t6
    jr $ra
    
blue_cap:
    li $t5, 00000100       # Load the pixel depiction into $t5
    sb $t5, 0($t6)         # Store the pixel dpeiction in $t6
    jr $ra
    
yellow_cap:
    li $t5, 00001000       # Load the pixel depiction into $t5
    sb $t5, 0($t6)         # Store the pixel dpeiction in $t6
    jr $ra

red_cap_ver:
    li $t5, 01000000       # Load the pixel depiction into $t5
    sb $t5, 0($t6)         # Store the pixel dpeiction in $t6
    jr $ra
    
blue_cap_ver:
    li $t5, 01000100       # Load the pixel depiction into $t5
    sb $t5, 0($t6)         # Store the pixel dpeiction in $t6
    jr $ra
    
yellow_cap_ver:
    li $t5, 01001000       # Load the pixel depiction into $t5
    sb $t5, 0($t6)         # Store the pixel dpeiction in $t6
    jr $ra
red_cap_ver_top:
    li $t5, 01100000       # Load the pixel depiction into $t5
    sb $t5, 0($t6)         # Store the pixel dpeiction in $t6
    jr $ra
    
blue_cap_ver_top:
    li $t5, 01100100       # Load the pixel depiction into $t5
    sb $t5, 0($t6)         # Store the pixel dpeiction in $t6
    jr $ra
    
yellow_cap_ver_top:
    li $t5, 01101000       # Load the pixel depiction into $t5
    sb $t5, 0($t6)         # Store the pixel dpeiction in $t6
    jr $ra